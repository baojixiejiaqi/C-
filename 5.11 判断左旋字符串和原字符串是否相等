#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<string.h>
#include<assert.h>
#pragma warning(disable : 4996)
//暴力求解法
//void left_move(char* arr, int n)
//{
//	assert(arr != NULL);
//	int len = strlen(arr);
//	if (len < n) {
//		printf("数值溢出\n");
//	}
//	else if (len == n) {
//		return;
//	}
//	else
//	{	
//		int  i = 0;
//		for (i = 0; i < n; i++)
//		{
//			//旋转一个字符
//			//1.取出第一个元素
//			char tmp = *arr;
//			//2.将后面的元素往前挪
//			int j = 0;
//			for (j = 0; j < len -1 ; j++) {//bcde
//				*(arr + j) = *(arr +1+j );//0-1 1-2 2-3 3-4 4-5
//				//3.将取出的元素放到数组的最后面
//				*(arr -1 + len) = tmp;
//			}
//		}
//	}
//}
//三部翻转法
//abcdef
//ba fedc
//cdefab

void reverse(char* left, char* right) {
	assert(left!=NULL);
	assert(right!=NULL);
	while (left < right) {
		char tmp = *left;
		  *left = *right;
		  *right = tmp;
		  left++;
		  right--;
	}
}
void left_move(char* arr, int k) 
{
assert(arr);
int len = (int)strlen(arr);
assert(k <= len);
reverse(arr, arr + k - 1);//逆序左边
reverse(arr + k, arr + len - 1);//逆序右边
reverse(arr, arr + len - 1);//逆序整体
}
//int main() {
//	int n = 0;
//	printf("请输入你所想要旋转的个数：");
//	scanf("%d", &n);
//	char arr[] = "abcdef";
//	printf("原函数为：%s\n",arr);
//	left_move(arr, n);
//	printf("结果为：%s\n", arr);
//	return 0;
//}
//穷举法，效率有点低
int is_left_move(char* s1, char* s2) {
	int len =strlen(s1);
	int i = 0;
	for (i = 0; i < len; i++) {
		left_move(s1, 1);
		strcmp(s1, s2);
		int ret = strcmp(s1, s2);
		if (ret == 0) {
			return 1;
		}
	}
	return 0;
}
int main() 
{
	char arr1[] = "abcdef";
	char arr2[] ="0";
	printf("请输入:");
	scanf("%s", &arr2);
	int len = strlen(arr1);
	int len1 = strlen(arr2);
	assert(len1 <= len);
	int ret =is_left_move(arr1, arr2);
	if (ret == 1)
	{
		printf("yes\n");
	}
	else
	{
		printf("no\n");
	}
}
