#include<stdio.h>
#include<stdlib.h>
struct Stu {
	char name[20];
	int age;
};
int cmp_int(const void* e1,const void* e2)
{
	return *(int*)e1 - *(int*)e2;//比较两个整形值
}
int cmp_float(const void* e1, const void* e2) {
	if (*(float*)e1 == *(float*)e2) {
		return 0;
	}
	else if (*(float*)e1 > *(float*)e2) {
		return 1;
	}
	else {
		return -1;
	}
	//return *(float*)e1 - *(float*)e2;
}
int cmp_struct_by_age(const void* e1, const void* e2)
{
	return (((struct Stu*)e1)->age , ((struct Stu*)e2)->age);
}
int cmp_struct_by_name(const void* e1, const void* e2)
{
	//比较名字就是比较字符串，字符串比较不能直接用大小于号，应该用strcmp比较
	return  strcmp(((struct Stu*)e1)->name ,((struct Stu*)e2)->name);
}
//void qsort(	void* base, 
//			size_t num,
//			size_t width,
//			int(*cmp)(const void* e1, const void* e2));

void test1()
{
	int arr[10] = { 9,8,7,6,5,4,3,2,1,0 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	qsort(arr, sz, sizeof(arr[0]), cmp_int);
	int i = 0;
	for (i = 0; i < sz; i++) {
		printf("%d ", i);
	}
	printf("\n");
}
void test2() {
	float f[] = { 9.0,8.0,7.0,6.0,5.0,4.0,3.0,2.0,1.0 };
	int sz = sizeof(f) / sizeof(f[0]);
	qsort(f, sz, sizeof(f[0]), cmp_float);
	int j = 0;
	for (j = 0; j < sz; j++) {
		printf("%f ", f[j]);
	}
	printf("\n");
}
void test3() {
	struct Stu s[3] = { {"zhangsan",20},{"lisi",30},{"wangwu",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	qsort(s, sz, sizeof(s[0]), cmp_struct_by_age);
	int k = 0;
	for (k = 0; k < sz; k++) {
		printf("%d ", s[k]);
	}
	printf("\n");
}
void test4() {
	struct Stu s[3] = { {"zhangsan",20},{"lisi",30},{"wangwu",10} };
	int sz = sizeof(s) / sizeof(s[0]);
	qsort(s, sz, sizeof(s[0]), cmp_struct_by_name);
	int l = 0;
	for (l = 0; l < sz; l++) {
		printf("%s ",s[l]);
	}
	printf("\n");
}

int main()
{
	test1();
	test2();
	test3();
	test4();
	return 0;
}
