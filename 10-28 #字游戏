#define _CRT_SECURE_NO_WARNINGS 1
#include<stdio.h>
#include<stdlib.h>
#include<time.h>
#include<Windows.h>
//符号的定义
#define ROW 3
#define COL 3
//函数的声明
//初始化棋盘的
void Intboard(char board[ROW][COL], int row, int col);
//打印棋盘的函数
void Displayboard(char board[ROW][COL], int row, int col);
//玩家下棋
void Playermove(char board[ROW][COL], int row, int col);
//电脑下棋
void Computermove(char board[ROW][COL], int row, int col);
//
//1. 玩家赢了 - *
//2. 电脑赢了 - #
//3. 平局 - Q
//4. 游戏继续 - C
//判断游戏是否有输赢
char IsWin(char board[ROW][COL], int row, int col);

void Intboard(char board[ROW][COL],int row,int col)
{
	int i = 0;
	int j = 0;
	for (i = 0; i < row; i++)
	{
		for (j = 0; j < col; j++) {
			board[i][j] = ' ';
		}
	}
}
void Displayboard(char board[ROW][COL], int row, int col)
{
	//分开打印，一个打印数字，一个打印棋盘格式
	int i = 0;
	for (i = 0; i < row; i++) 
	{
		int j = 0;
		for(j = 0;j < col; j++) //
		{
			printf(" %c ", board[i][j]);
			if (j < col - 1)
			{
				printf("|");
			}
		}
		printf("\n");
		if(i<row - 1)
		{
			for (j = 0; j < col; j++) 
			{
				printf("---");
				if (j < col - 1) {
					printf("|");
				}
			}
			printf("\n");
		}
	}
	

}
void Playermove(char board[ROW][COL],int row,int col)
{
//判断坐标合法性
	int x = 0;
	int y = 0;
	printf("玩家走：");
	while (1)
	{
		scanf("%d %d", &x, &y);
		if (x >= 1 && x <= row && y >= 1 && y <= col)//在坐标范围内下
		{
			//判断这个坐标是否已经下过了
			if (board[x - 1][y - 1] == ' ')
			{
				board[x - 1][y - 1] = '*';
				break;
			}
			else {
				printf("坐标被占用，请重新输入\n");
			}
		}
		else
		{
			printf("坐标非法，请重新输入\n");
		}

	}
}
void Computermove(char board[ROW][COL], int row, int col)
{
	printf("电脑输入：\n");
	while (1) {
		int x = rand() % row;//求余可以保证到1-3之间
		int y = rand() % col;
		if (board[x][y] == ' ')
		{
			board[x][y] = '#';
			break;
		}
	}
}
char Isfull(char board[ROW][COL], int row, int col) 
{
	int i = 0;
	int j = 0;
	for(i = 0; i<row;i++)
	{
		for (j = 0; j < col; j++) {
			if (board[i][j] == ' ')
			{
				return 0;//棋盘没满
			}
		}
	
	}
	return 1;//棋盘满了
}
char IsWin(char board[ROW][COL], int row, int col)
{
	int i = 0;
//横行三个
	for (i = 0; i < row; i++)
	{
		if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != ' ') {
			return board[i][0];
		}
	}
//竖行三个
	for (i = 0; i < col; i++) {
		if (board[0][i] == board[1][i] && board[1][i] == board[2][i]  && board[0][i] != ' ')
		{
			return board[0][i];
		}
	}
//斜着两行
	if(board[0][0] == board[1][1] && board[1][1] == board[2][2]&& board[1][1] != ' ')
	{
		return board[1][1];
	}
	if (board[0][2] == board[1][1] && board[1][1] == board[2][0]&& board[1][1] != ' ') {
		return board[0][2];
	}
//以上情况都不是只能是平局
	int ret = Isfull(board, row, col);
	if (ret == 1) {
		return 'Q';
	}
	return 'C';
}
void menu()
{
	printf("*****************************************\n");
	printf("************      1.play      ***********\n");
	printf("************      0.exit      ***********\n");
	printf("*****************************************\n");

}
void game()
{
	//存储数据 - 二维数组
	char board[ROW][COL];
	//初始化棋盘 - 初始化空格
	Intboard(board, ROW, COL);
	//打印一下棋盘 - 本质是打印数组的内容
	Displayboard(board, ROW, COL);
	char ret = 0;//接受游戏状态
	while (1)
	{
		//玩家下棋
		Playermove(board, ROW, COL);
		Displayboard(board, ROW, COL);
		ret = IsWin(board, ROW, COL);//判断玩家赢了没
		if(ret !='C')
		{
			break;
		}
		//电脑下棋
		Computermove(board, ROW, COL);
		Displayboard(board, ROW, COL);
		ret = IsWin(board, ROW, COL);//判断电脑赢了没
		if (ret != 'C')
		{
			break;
		}

	}
	if (ret == '*') 
	{
		printf("玩家获胜\n");
		Displayboard(board, ROW, COL);
		Sleep(1000);
		system("cls");
	}else if(ret == '#')
	{
		printf("电脑获胜\n");
		Displayboard(board, ROW, COL);
		Sleep(100);
		system("cls");
	}
	else {
		printf("平局\n");
		Displayboard(board, ROW, COL);
		Sleep(100);
		system("cls");
	}
	
//初始化表格
//打印 | 以及_ _ _
//玩家输入
//电脑输入
//两个输入之间判断表格状态
//电脑赢 玩家赢 平局 继续
}
int main()
{
	int input = 0;
	char ret = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择：");
		scanf("%d", &input);
		switch (input)
		{
		case 1 :
			game();
			break;
		case 0 :
			printf("退出成功\n");
			break;
		default:
			printf("请重新输入\n");
			break;
		}
	}
	while (input);
	return 0;
}
