#include<stdio.h>
#include<stdlib.h>
#include<Windows.h>
#include<time.h>
#pragma warning(disable : 4996)
#define EASY_COUNT 10
#define ROW 9  //需要的格子
#define COL 9
#define ROWS ROW+2//实际存放的格子
#define COLS COL+2
//初始化棋盘的
void intboard(char board[ROWS][COLS], int rows, int cols, char set);
//打印棋盘
void displayboard(char board[ROWS][COLS], int row, int col);
//布置雷
void setmine(char mine[ROWS][COLS], int row, int col);
//排查雷
void findmine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col);

void intboard(char board[ROWS][COLS],int rows,int cols,char set)
{
	int i = 0;
	int j = 0;
	for(i = 0; i <rows;i++)
	{
		for (j = 0; j <cols; j++) {
			board[i][j] = set;
	}
	}
}
void displayboard(char board[ROWS][COLS], int row, int col)
{
	{
		int i = 0;
		int j = 0;
		for (i = 0; i <= col; i++)
		{
			printf("%d ", i);
		}
		printf("\n");
		for (i = 1;i <=row; i++)
		{
			printf("%d ", i);
			for (j = 1; j <=col; j++)
			{
				printf("%c ", board[i][j]);
			}
			printf("\n");
		}
	}
}
void setmine(char mine[ROWS][COLS],int row,int col)
{
	int count = EASY_COUNT;
	while (count)
	{
		int x = rand()%row + 1;
		int y = rand()%col + 1;
		if (mine[x][y] == '0') {
			mine[x][y] = '1';
			count--;
		}
	}
}
static int get_findmine(char mine[ROW][COL], int x, int y) {
	return mine[x - 1][y - 1] + 
		mine[x][y - 1] + 
		mine[x + 1][y - 1]
	+ mine[x + 1][y] + 
		mine[x + 1][y + 1] +
	mine[x][y + 1] + 
		mine[x - 1][y + 1] +
		mine[x - 1][y] -8 * '0';
	//把这个数字旁边8个有雷的数量统计出来
}
void findmine(char mine[ROWS][COLS], char show[ROWS][COLS], int row, int col)
{
	//1. 输入排查的坐标
	//2. 检查坐标处是不是雷
	   // (1) 是雷   - 很遗憾炸死了 - 游戏结束
	   // (2) 不是雷  - 统计坐标周围有几个雷 - 存储排查雷的信息到show数组，游戏继续
	int x = 0;
	int y = 0;
	int win = 0;
	while (win < row * col - EASY_COUNT)
	{
		printf("请输入你选择的坐标:\n");
		scanf("%d %d", &x, &y);
		if(x >=1 && x <=row &&y >=1 && y <= col )//判断坐标合法性
		{
			if (mine[x][y] == '1')
			{
				//不是雷情况下，统计x,y坐标周围有几个雷
				printf("很遗憾,你被炸死了\n");
				displayboard(mine, row, col);
				break;
			}
			else
			{
				int count = get_findmine(mine,x,y);
				show[x][y] = count +'0' ;
				displayboard(show, row, col);
				win++;
				Sleep(1000);
				system("cls");
			}
		}
		else {
			printf("坐标输入错误，请重新输入\n");
		}
		
	}
	if (win == row * col - EASY_COUNT)
		{
		printf("恭喜你，你赢了\n");
		displayboard(mine, row, col);
		}
	
}
void menu()
{
	printf("***************************\n");
	printf("**********1.play***********\n");
	printf("**********0.exit***********\n");
	printf("***************************\n");
}
void game()
{
	//存放布置好的雷的信息
	//存放排查出的雷的信息
	char mine[ROWS][COLS] = { 0 };
	char show[ROWS][COLS] = { 0 };
	//初始化棋盘
	intboard(mine, ROWS, COLS, '0');
	intboard(show, ROWS, COLS, '*');
	//打印一下棋盘
	//displayboard(mine,ROW, COL);
	displayboard(show, ROW, COL);
	//布置雷
	setmine(mine, ROW, COL);
	//排查雷
	findmine(mine, show,ROW, COL);
}

int main()
{
	int input = 0;
	srand((unsigned int)time(NULL));
	do
	{
		menu();
		printf("请选择：");	
		scanf("%d", &input);
		switch(input)
		{
		case 1:
			game();
			break;
		case 0:
			printf("已退出\n");
			break;
		default:
			printf("请重新选择\n");
			break;
		}
	} while (input);
	return 0;
}
